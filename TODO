
Approximately in the order of importance...
===========================================

- Assumptions on class level don't work.

- Add better tracking of temporary folders. The context should carry the 
  info about files/folders created at each lifecycle's stage and clean up early (or 
  report the inability to do so, along with the stack trace that allocated a given file).
  Failure to clean up properly (close all files) could also bring the test case/ 
  suite to a failure. This could also be an aspect, but I think an embedded functionality
  will be easier to use for beginners.

- Should running in a sub-thread (handling @Timeout) be disabled if there are no timeouts?
  This would probably speed up execution. The default could then be to not timeout at all?  

- Temporary file names could be created with nasty things inside (spaces, etc.). 

- The code in RandomizedRunner grew a bit complex after thread management has been added; 
  think of simplifying it?

- Rewrite LuceneTestCase on top of RandomizedRunner => prove it is functional.
    - @UseNoMemoryExpensiveCodec => aspect that filters the result or input list for randomization?
    - Disk throttling. => aspect.

- Can we integrate with TestNG too?
- How to simulate 'tests.iter.min'?
- deal with catch clauses that potentially catch assertion errors (and ThreadDeath)? => aspect
- What about TestRule support (introduced in 4.9?). If we rely on it explicitly, will this cause problems with older shells (ant, eclipse)?

- A rewritten ant task for handling JUnit4 tests properly, without wrappers... 

- Check if intellij idea/ netbeans show multiple failures properly. how do they behave with the modified
  test case descriptions (do they lead to source code properly? do they show them properly?)

Other things
============

RandomizedRunner currently logs all exceptions when executing tests (test exceptions, after exception, etc.). This results
in:

- Eclipse shows all exceptions next to a test case node [NICE],
- ant: shows both exceptions in xml and plain text dumps (and in reports) [NICE],
- maven shows and logs the test case multiplied for all exceptions (weird, but can be understood and all information is there),


LuceneTestCase features intentionally omitted
=============================================

tests.verbose - What's the point of this anyway? Most test hosts will buffer and redirect sysout/syserr anyway.
tempDir - Override the entire -Djava.io.tmpdir=... instead.

There is an important difference in how we repeat tests: we do full loop (hooks, test case), 
LTC does simple method repetitions. Simple method repetition could be added to @Repeat as a runHooks=false flag? 
